{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with lists and arrays\n",
    "*PyUnitWizard helps you to concatenate or stack lists, tuples or arrays of quantities*\n",
    "\n",
    "Sometimes we work with a list of quantites, but we need a quantity where the value is a list. Or sometimes we work with a list of array quantities and we need to stack them in a single quantity. Have a look to this documentation section to find out some useful tools to work with lists of quantities.\n",
    "\n",
    "Let's show how the methods `pyunitwizard.string_to_quantity()` and `pyunitwizard.string_to_unit()` work:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Concatenate\n",
    "\n",
    "Let's show how the method `pyunitwizard.concatenate()` works with a simple example. Let's suppose we have a list of quantities:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyunitwizard as puw\n",
    "import numpy as np\n",
    "puw.configure.load_library(['pint', 'openmm.unit'])\n",
    "puw.configure.set_default_form('pint')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_quantities = [puw.quantity(ii, 'nm') for ii in range(10)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0 <Unit('nanometer')>,\n",
       " 1 <Unit('nanometer')>,\n",
       " 2 <Unit('nanometer')>,\n",
       " 3 <Unit('nanometer')>,\n",
       " 4 <Unit('nanometer')>,\n",
       " 5 <Unit('nanometer')>,\n",
       " 6 <Unit('nanometer')>,\n",
       " 7 <Unit('nanometer')>,\n",
       " 8 <Unit('nanometer')>,\n",
       " 9 <Unit('nanometer')>]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_quantities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But we need a unique quantity with all former values in a single list:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "quantity = puw.concatenate(list_quantities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tbody><tr><th>Magnitude</th><td style='text-align:left;'><pre>[[0 1 2]<br> [0 1 2]<br> [0 1 2]<br> [0 1 2]]</pre></td></tr><tr><th>Units</th><td style='text-align:left;'>nanometer</td></tr></tbody></table>"
      ],
      "text/latex": [
       "$\\begin{pmatrix}0 & 1 & 2\\\\ \n",
       "0 & 1 & 2\\\\ \n",
       "0 & 1 & 2\\\\ \n",
       "0 & 1 & 2\\end{pmatrix}\\ \\mathrm{nanometer}$"
      ],
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [0, 1, 2],\n",
       "       [0, 1, 2],\n",
       "       [0, 1, 2]]) <Unit('nanometer')>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quantity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function `pyunitwizard.concatenate()` can operate also with numpy array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_quantities = [ puw.quantity(np.zeros([3,2]), 'nm') for ii in range(2)]\n",
    "list_quantities += [ puw.quantity(np.ones([3,2]), 'angstroms') for ii in range(2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[0., 0.],\n",
       "        [0., 0.],\n",
       "        [0., 0.]]) <Unit('nanometer')>,\n",
       " array([[0., 0.],\n",
       "        [0., 0.],\n",
       "        [0., 0.]]) <Unit('nanometer')>,\n",
       " array([[1., 1.],\n",
       "        [1., 1.],\n",
       "        [1., 1.]]) <Unit('angstrom')>,\n",
       " array([[1., 1.],\n",
       "        [1., 1.],\n",
       "        [1., 1.]]) <Unit('angstrom')>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_quantities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "quantity = puw.concatenate(list_quantities, type_value='numpy.ndarray', to_unit='nm', to_form='openmm.unit')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Quantity(value=array([[[0. , 0. ],\n",
       "        [0. , 0. ],\n",
       "        [0. , 0. ]],\n",
       "\n",
       "       [[0. , 0. ],\n",
       "        [0. , 0. ],\n",
       "        [0. , 0. ]],\n",
       "\n",
       "       [[0.1, 0.1],\n",
       "        [0.1, 0.1],\n",
       "        [0.1, 0.1]],\n",
       "\n",
       "       [[0.1, 0.1],\n",
       "        [0.1, 0.1],\n",
       "        [0.1, 0.1]]]), unit=nanometer)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quantity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the concatenate function does not only work with sequences of quantities, it can also process sequences of sequences of quantities:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_quantities = [ [puw.quantity(ii, 'nm') for ii in range(3)] for jj in range(4)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>],\n",
       " [0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>],\n",
       " [0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>],\n",
       " [0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>]]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_quantities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "quantity = puw.concatenate(list_quantities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tbody><tr><th>Magnitude</th><td style='text-align:left;'><pre>[0 1 2 0 1 2 0 1 2 0 1 2]</pre></td></tr><tr><th>Units</th><td style='text-align:left;'>nanometer</td></tr></tbody></table>"
      ],
      "text/latex": [
       "$\\begin{pmatrix}0 & 1 & 2 & 0 & 1 & 2 & 0 & 1 & 2 & 0 & 1 & 2\\end{pmatrix}\\ \\mathrm{nanometer}$"
      ],
      "text/plain": [
       "array([0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]) <Unit('nanometer')>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quantity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stack\n",
    "\n",
    "The function `pyunitwizard.stack()` joins a sequence of sequences of quantities along a new axis (same behaviour as numpy.stack). Let's have a look to the following example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_list_quantities = [ [puw.quantity(ii, 'nm') for ii in range(3)] for jj in range(4)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>],\n",
       " [0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>],\n",
       " [0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>],\n",
       " [0 <Unit('nanometer')>, 1 <Unit('nanometer')>, 2 <Unit('nanometer')>]]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_list_quantities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "quantity = puw.stack(list_quantities, type_value='numpy.ndarray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tbody><tr><th>Magnitude</th><td style='text-align:left;'><pre>[[0 1 2]<br> [0 1 2]<br> [0 1 2]<br> [0 1 2]]</pre></td></tr><tr><th>Units</th><td style='text-align:left;'>nanometer</td></tr></tbody></table>"
      ],
      "text/latex": [
       "$\\begin{pmatrix}0 & 1 & 2\\\\ \n",
       "0 & 1 & 2\\\\ \n",
       "0 & 1 & 2\\\\ \n",
       "0 & 1 & 2\\end{pmatrix}\\ \\mathrm{nanometer}$"
      ],
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [0, 1, 2],\n",
       "       [0, 1, 2],\n",
       "       [0, 1, 2]]) <Unit('nanometer')>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quantity"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
